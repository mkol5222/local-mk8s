#cloud-config

network:
  version: 2
  ethernets:
    extra0:
      dhcp4: no
      match:
        macaddress: "52:54:00:f1:94:fa"
      addresses: [10.38.0.101/24]
    eth0:
      dhcp4: yes
      nameservers:
        addresses: [1.1.1.1]
        search: [mshome.net]
        
runcmd:
 - |
   # install and start microk8s
   netplan apply
   snap install microk8s --classic
   microk8s start
   microk8s status  
   microk8s enable dns ingress cert-manager
   microk8s enable metallb:10.38.0.201-10.38.0.250
   microk8s add-node -t d545393c597dc390d12631836fd074464b5638bdfa3c95983a845ce604b703fe
   
   # install Arkade package manager
   # When running as a startup script (cloud-init), the HOME variable is not always set.
   # As it is required for arkade to properly download tools, 
   # set the variable to /usr/local so arkade will download binaries to /usr/local/.arkade
   if [ -z "${HOME}" ]; then
     export HOME=/usr/local
   fi
   curl -sLS https://get.arkade.dev | sh
   
  

        
apt_update: true
apt_upgrade: true
package_update: true
package_upgrade: true
package_reboot_if_required: false
packages:
  - dnsutils
  - jq
  - curl
  - git
  - vim

system_info:
  default_user:
    groups: [microk8s]

write_files:
  - path: /etc/netplan/10-eth1.yaml
    content: |
      network:
        version: 2
        ethernets:
          eth1:
            dhcp4: no
            addresses: [10.38.0.101/24]
  - path: /etc/bash.bashrc
    content: |
      alias kubectl='microk8s kubectl'
      alias helm='microk8s helm'
      alias k='kubectl'
      alias h='helm'  
    append: true
  - path: /usr/local/bin/verify-dns
    content: |
      #!/bin/bash
      # Verify DNS resolution
      if [ -z "$APPSEC_HOSTNAME" ]; then
          echo "APPSEC_HOSTNAME is not defined. Please define it first..."
          exit 1
      fi
      sudo resolvectl flush-caches 
      VMPUBLICIP=$(curl -s ip.iol.cz/ip/)
      DNSIP=$(dig +short $APPSEC_HOSTNAME)
      echo "Checking that DNS recort for $APPSEC_HOSTNAME points to $VMPUBLICIP"
      if [ "$VMPUBLICIP" == "$DNSIP" ]; then
          echo -e "\033[32m SUCCESS: DNS points to this VM."
      else
          if [ -z "$DNSIP" ]; then
              echo -e "\033[31m DNS record not defined. Create: $APPSEC_HOSTNAME IN A $VMPUBLICIP"
          else
              echo -e "\033[31m DNS record points to ***wrong*** IP: $DNSIP, but it should be $VMPUBLICIP"
          fi
          echo -e "\033[31m FAILED: please setup DNS record for $APPSEC_HOSTNAME"
      fi 
    permissions: '0755'

final_message: "The system is finally up, after $UPTIME seconds"